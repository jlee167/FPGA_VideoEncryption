--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=8 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 14.0 cbx_cycloneii 2014:06:17:18:06:03:SJ cbx_lpm_add_sub 2014:06:17:18:06:03:SJ cbx_lpm_compare 2014:06:17:18:06:03:SJ cbx_lpm_decode 2014:06:17:18:06:03:SJ cbx_mgl 2014:06:17:18:10:38:SJ cbx_stratix 2014:06:17:18:06:03:SJ cbx_stratixii 2014:06:17:18:06:03:SJ  VERSION_END


-- Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_rsa
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode1098w[3..0]	: WIRE;
	w_anode1115w[3..0]	: WIRE;
	w_anode1125w[3..0]	: WIRE;
	w_anode1135w[3..0]	: WIRE;
	w_anode1145w[3..0]	: WIRE;
	w_anode1155w[3..0]	: WIRE;
	w_anode1165w[3..0]	: WIRE;
	w_anode1175w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode1175w[3..3], w_anode1165w[3..3], w_anode1155w[3..3], w_anode1145w[3..3], w_anode1135w[3..3], w_anode1125w[3..3], w_anode1115w[3..3], w_anode1098w[3..3]);
	w_anode1098w[] = ( (w_anode1098w[2..2] & (! data_wire[2..2])), (w_anode1098w[1..1] & (! data_wire[1..1])), (w_anode1098w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1115w[] = ( (w_anode1115w[2..2] & (! data_wire[2..2])), (w_anode1115w[1..1] & (! data_wire[1..1])), (w_anode1115w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1125w[] = ( (w_anode1125w[2..2] & (! data_wire[2..2])), (w_anode1125w[1..1] & data_wire[1..1]), (w_anode1125w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1135w[] = ( (w_anode1135w[2..2] & (! data_wire[2..2])), (w_anode1135w[1..1] & data_wire[1..1]), (w_anode1135w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1145w[] = ( (w_anode1145w[2..2] & data_wire[2..2]), (w_anode1145w[1..1] & (! data_wire[1..1])), (w_anode1145w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1155w[] = ( (w_anode1155w[2..2] & data_wire[2..2]), (w_anode1155w[1..1] & (! data_wire[1..1])), (w_anode1155w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1165w[] = ( (w_anode1165w[2..2] & data_wire[2..2]), (w_anode1165w[1..1] & data_wire[1..1]), (w_anode1165w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1175w[] = ( (w_anode1175w[2..2] & data_wire[2..2]), (w_anode1175w[1..1] & data_wire[1..1]), (w_anode1175w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
